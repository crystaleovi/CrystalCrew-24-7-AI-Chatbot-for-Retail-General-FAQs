AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chatbot Infrastructure with AWS Bedrock'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    Description: Environment name

Resources:
  # DynamoDB Tables
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chatbot-sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  AnalyticsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chatbot-analytics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: date-index
          KeySchema:
            - AttributeName: date
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ChatbotPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - translate:TranslateText
                  - comprehend:DetectSentiment
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:GetItem
                Resource: '*'

  # Lambda Function
  ChatbotLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: chatbot-handler
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          # Code will be deployed separately

  # API Gateway
  ChatbotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: chatbot-api
      Description: AI Chatbot API
      EndpointConfiguration:
        Types:
          - REGIONAL

  ChatbotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatbotApi
      ParentId: !GetAtt ChatbotApi.RootResourceId
      PathPart: chat

  ChatbotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotApi
      ResourceId: !Ref ChatbotResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatbotLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Origin: true

  # CORS Options Method
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotApi
      ResourceId: !Ref ChatbotResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Headers: true
            Access-Control-Allow-Methods: true
            Access-Control-Allow-Origin: true

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatbotMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ChatbotApi
      StageName: prod

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatbotLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ChatbotApi}/*/POST/chat'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/prod/chat'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'
